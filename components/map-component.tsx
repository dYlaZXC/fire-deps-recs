"use client"

import { useEffect, useRef, useState } from 'react'
import { Map as MapLibreMap, NavigationControl, ScaleControl, Marker, Popup } from 'maplibre-gl'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { MapPin, Box, Map as MapIcon, RotateCcw } from 'lucide-react'
import 'maplibre-gl/dist/maplibre-gl.css'
import * as wellknown from 'wellknown'

interface Station {
  id: number
  latitude: string
  longitude: string
  description: string
  caption: string
  district_id: number
  district_name?: string
  exist_text: string
  has_land?: boolean // –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  score?: number // –û—Ü–µ–Ω–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
}

interface CoverageGrid {
  district_id: number
  geometry: string
  color: string
  population: number
  fire_count: number
  all_risk_objects?: number
}

interface TransportIncident {
  id: number
  latitude: number
  longitude: number
  cause: string
  transport_type: string
  brand: string
  model: string
  year: string
  created_at: string
  was_fire: boolean
  injured: string
  deceased: string
}

interface BuildingIncident {
  id: number
  latitude: number
  longitude: number
  building_type: string
  cause: string
  floors: string
  damage_level: string
  created_at: string
  was_fire: boolean
  injured: string
  deceased: string
}

interface HelpIncident {
  id: number
  latitude: number
  longitude: number
  help_type: string
  location: string
  assistance_type: string
  created_at: string
  was_fire: boolean
  injured: string
  deceased: string
}

interface VigilanceIncident {
  id: number
  latitude: number
  longitude: number
  reason: string
  source: string
  district: string
  created_at: string
  was_fire: boolean
  injured: string
  deceased: string
}

interface DryGrassIncident {
  id: number
  latitude: number
  longitude: number
  grass_type: string
  location: string
  cause: string
  area: string
  created_at: string
  was_fire: boolean
  injured: string
  deceased: string
}

interface MapComponentProps {
  stations: Station[]
  coverageGrids: CoverageGrid[]
  baseCoverageGrids: CoverageGrid[]
  showCoverageZones: boolean
  selectedScenario: string
  selectedDistrict: string
  transportIncidents?: TransportIncident[]
  showTransportIncidents?: boolean
  buildingIncidents?: BuildingIncident[]
  showBuildingIncidents?: boolean
  helpIncidents?: HelpIncident[]
  vigilanceIncidents?: VigilanceIncident[]
  dryGrassIncidents?: DryGrassIncident[]
  onStationSelect?: (station: Station) => void
}

const MAPTILER_KEY = 'bBkhJLzOsVLowQmEIXZO'
const ALMATY_CENTER: [number, number] = [76.9286, 43.2384] // –ê–ª–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

export default function MapComponent({ 
  stations, 
  coverageGrids, 
  baseCoverageGrids,
  showCoverageZones, 
  selectedScenario,
  selectedDistrict,
  transportIncidents = [],
  showTransportIncidents = false,
  buildingIncidents = [],
  showBuildingIncidents = false,
  helpIncidents = [],
  vigilanceIncidents = [],
  dryGrassIncidents = [],
  onStationSelect
}: MapComponentProps) {
  const mapContainer = useRef<HTMLDivElement>(null)
  const map = useRef<MapLibreMap | null>(null)
  const [mapLoaded, setMapLoaded] = useState(false)
  const [is3D, setIs3D] = useState(false)
  const markers = useRef<Marker[]>([])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    if (!mapContainer.current) return

    const mapInstance = new MapLibreMap({
      container: mapContainer.current,
      style: `https://api.maptiler.com/maps/streets-v2/style.json?key=${MAPTILER_KEY}`,
      center: ALMATY_CENTER,
      zoom: 10,
      pitch: 0,
      bearing: 0
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
    mapInstance.addControl(new NavigationControl(), 'top-right')
    mapInstance.addControl(new ScaleControl(), 'bottom-left')

    mapInstance.on('load', () => {
      setMapLoaded(true)
    })

    map.current = mapInstance

    return () => {
      if (map.current) {
        map.current.remove()
      }
    }
  }, [])

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ 2D/3D
  const toggle3D = () => {
    if (!map.current) return
    
    const newIs3D = !is3D
    setIs3D(newIs3D)
    
    if (newIs3D) {
      // –í–∫–ª—é—á–∞–µ–º 3D —Ä–µ–∂–∏–º
      map.current.easeTo({
        pitch: 60,
        bearing: -17.6,
        duration: 1000
      })
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ 2D
      map.current.easeTo({
        pitch: 0,
        bearing: 0,
        duration: 1000
      })
    }
  }

  // –°–±—Ä–æ—Å –∫ —Ü–µ–Ω—Ç—Ä—É –ê–ª–º–∞—Ç—ã
  const resetView = () => {
    if (!map.current) return
    
    map.current.easeTo({
      center: ALMATY_CENTER,
      zoom: 10,
      pitch: is3D ? 60 : 0,
      bearing: is3D ? -17.6 : 0,
      duration: 1500
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ —Ç–∏–ø—É —Å—Ç–∞–Ω—Ü–∏–∏
  const getStationColor = (station: Station) => {
    // –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—é –ø–æ–ª—è has_land
    const isDynamicRecommendation = station.has_land !== undefined || 
                                   station.exist_text?.includes('–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è') ||
                                   station.exist_text?.includes('ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ') ||
                                   (selectedScenario === "dynamic" && station.score !== undefined)
    
    if (isDynamicRecommendation) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º has_land –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ 
      const hasLand = Boolean(station.has_land)
      const color = hasLand ? '#10B981' : '#EF4444' // –ó–µ–ª–µ–Ω—ã–π –µ—Å–ª–∏ –µ—Å—Ç—å –∑–µ–º–ª—è, –∫—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ –Ω–µ—Ç
      console.log(`üéØ Dynamic Station ${station.id}:`, {
        has_land_raw: station.has_land,
        has_land_type: typeof station.has_land,
        has_land_parsed: hasLand,
        color: color,
        description: station.description,
        exist_text: station.exist_text
      })
      return color
    }
    
    switch (station.exist_text) {
      case '–°—É—â–µ—Å—Ç–≤—É–µ—Ç': return '#6B7280' // —Å–µ—Ä—ã–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
      case '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è 5': return '#3B82F6' // —Å–∏–Ω–∏–π –¥–ª—è +5
      case '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è 16': return '#10B981' // –∑–µ–ª–µ–Ω—ã–π –¥–ª—è +16
      case '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è': return '#EF4444' // –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è AI
      default: 
        return '#6B7280'
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å—Ç–∞–Ω—Ü–∏–π
  useEffect(() => {
    if (!map.current || !mapLoaded) return

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.current.forEach(marker => {
      marker.remove()
    })
    markers.current = []

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–∞–π–æ–Ω—É
    const safeStations = Array.isArray(stations) ? stations : []
    const filteredStations = selectedDistrict === "all" 
      ? safeStations 
      : safeStations.filter(station => station.district_id === parseInt(selectedDistrict))
      
    console.log(`–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ${filteredStations.length} —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è ${selectedScenario}, —Ä–∞–π–æ–Ω: ${selectedDistrict}`)
    
    // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ
    if (selectedScenario === "dynamic" && filteredStations.length > 0) {
      console.log("üîç –ü–û–î–†–û–ë–ù–´–ï –î–ê–ù–ù–´–ï –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –°–¢–ê–ù–¶–ò–ô:")
      filteredStations.forEach((station, index) => {
        console.log(`Station ${index + 1}:`, {
          id: station.id,
          description: station.description,
          exist_text: station.exist_text,
          exist_text_type: typeof station.exist_text,
          has_land: station.has_land,
          has_land_type: typeof station.has_land,
          score: station.score,
          latitude: station.latitude,
          longitude: station.longitude
        })
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    filteredStations.forEach(station => {
      const lat = parseFloat(station.latitude)
      const lng = parseFloat(station.longitude)
      
      if (isNaN(lat) || isNaN(lng)) {
        console.warn(`–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${station.id}:`, station.latitude, station.longitude)
        return
      }

      // –°–æ–∑–¥–∞–µ–º HTML —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
      const el = document.createElement('div')
      el.className = 'fire-station-marker'
      el.style.cssText = `
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background-color: ${getStationColor(station)};
        border: 3px solid white;
        box-shadow: 0 2px 6px rgba(0,0,0,0.3);
        cursor: pointer;
        transition: transform 0.2s ease;
      `

      // –≠—Ñ—Ñ–µ–∫—Ç hover - —É–±–∏—Ä–∞–µ–º transform —á—Ç–æ–±—ã —Ç–æ—á–∫–∏ –Ω–µ –¥–≤–∏–≥–∞–ª–∏—Å—å
      el.addEventListener('mouseenter', () => {
        el.style.boxShadow = '0 4px 12px rgba(0,0,0,0.5)'
      })
      el.addEventListener('mouseleave', () => {
        el.style.boxShadow = '0 2px 6px rgba(0,0,0,0.3)'
      })

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏
      el.addEventListener('click', () => {
        if (onStationSelect) {
          onStationSelect(station)
        }
      })

            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      const cleanDescription = station.description?.includes('ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ') 
        ? `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–Ω—Ü–∏—è ${station.id}` 
        : (station.description || '–ü–æ–∂–∞—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è')
      
      const cleanExistText = station.exist_text?.includes('ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ') 
        ? '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è' 
        : (station.exist_text || '–ù–µ —É–∫–∞–∑–∞–Ω')
      
      const cleanCaption = station.caption?.includes('ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ') 
        ? `–û—Ü–µ–Ω–∫–∞: ${station.score?.toFixed(2) || 'N/A'}` 
        : station.caption

      // –°–æ–∑–¥–∞–µ–º popup —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
      const popupHTML = `
        <div style="padding: 12px; font-family: system-ui, -apple-system, sans-serif; min-width: 200px;">
          <h3 style="font-weight: bold; font-size: 14px; margin: 0 0 6px 0; color: #1f2937;">
            ${cleanDescription}
          </h3>
          ${cleanCaption ? `
            <p style="font-size: 12px; color: #6b7280; margin: 0 0 8px 0;">
              ${cleanCaption}
            </p>
          ` : ''}
          <div style="font-size: 12px; line-height: 1.4;">
            <p style="margin: 4px 0;">
              <strong>–†–∞–π–æ–Ω:</strong> ${station.district_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            </p>
            <p style="margin: 4px 0;">
              <strong>–°—Ç–∞—Ç—É—Å:</strong> 
              <span style="color: ${getStationColor(station)}; font-weight: 500;">
                ${cleanExistText}
              </span>
            </p>
            ${(station.has_land !== undefined || station.exist_text?.includes('–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è') || station.exist_text?.includes('ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ') || (selectedScenario === "dynamic" && station.score !== undefined)) ? `
              <p style="margin: 6px 0 4px 0;">
                <strong>–¢–∏–ø:</strong> 
                <span style="color: ${station.has_land ? '#10b981' : '#ef4444'}; font-weight: 500;">
                  ${station.has_land ? '–ï—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∑–µ–º–ª—è' : '–ù–µ—Ç –∑–µ–º–ª–∏, –Ω–æ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'}
                </span>
              </p>
              ${station.score ? `
                <p style="margin: 4px 0;">
                  <strong>–û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:</strong> ${station.score.toFixed(2)}
                </p>
              ` : ''}
            ` : ''}
          </div>
        </div>
      `

      // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä —Å popup
      const marker = new Marker({ element: el })
        .setLngLat([lng, lat])
        .setPopup(
          new Popup({ 
            offset: 25,
            closeButton: true,
            closeOnClick: false,
            maxWidth: '300px'
          }).setHTML(popupHTML)
        )
      marker.addTo(map.current!)

      markers.current.push(marker)
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    if (showTransportIncidents && transportIncidents.length > 0) {
      transportIncidents.forEach(incident => {
        if (isNaN(incident.latitude) || isNaN(incident.longitude)) {
          return
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        const getIncidentColor = (cause: string) => {
          if (cause?.toLowerCase().includes('–∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ') || cause?.toLowerCase().includes('–∫–∑')) {
            return '#EF4444' // –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –ö–ó
          }
          if (cause?.toLowerCase().includes('–¥—Ç–ø')) {
            return '#F59E0B' // –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –î–¢–ü
          }
          if (cause?.toLowerCase().includes('—Ç–æ–ø–ª–∏–≤–Ω')) {
            return '#FBBF24' // –∂–µ–ª—Ç—ã–π –¥–ª—è —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
          }
          if (cause?.toLowerCase().includes('—Ç–æ—Ä–º–æ–∑')) {
            return '#3B82F6' // —Å–∏–Ω–∏–π –¥–ª—è —Ç–æ—Ä–º–æ–∑–æ–≤
          }
          return '#6B7280' // —Å–µ—Ä—ã–π –¥–ª—è –ø—Ä–æ—á–∏—Ö
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        const getIncidentSize = (incident: TransportIncident) => {
          if (incident.deceased && parseInt(incident.deceased) > 0) return 16
          if (incident.injured && parseInt(incident.injured) > 0) return 14
          if (incident.was_fire) return 12
          return 10
        }

        // –°–æ–∑–¥–∞–µ–º HTML —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        const el = document.createElement('div')
        el.className = 'transport-incident-marker'
        const size = getIncidentSize(incident)
        el.style.cssText = `
          width: ${size}px;
          height: ${size}px;
          border-radius: 50%;
          background-color: ${getIncidentColor(incident.cause)};
          border: 2px solid white;
          box-shadow: 0 2px 4px rgba(0,0,0,0.3);
          cursor: pointer;
          opacity: 0.8;
          transition: all 0.2s ease;
        `

        // –≠—Ñ—Ñ–µ–∫—Ç hover
        // el.addEventListener('mouseenter', () => {
        //   el.style.opacity = '1'
        //   el.style.transform = 'scale(1.2)'
        //   el.style.boxShadow = '0 4px 8px rgba(0,0,0,0.5)'
        // })
        // el.addEventListener('mouseleave', () => {
        //   el.style.opacity = '0.8'
        //   el.style.transform = 'scale(1)'
        //   el.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)'
        // })
        
        // –°—Ç–∞–ª–æ (–±–µ–∑ scale):
        el.addEventListener('mouseenter', () => {
          el.style.opacity = '1'
          el.style.boxShadow = '0 4px 8px rgba(0,0,0,0.5)'
        })
        el.addEventListener('mouseleave', () => {
          el.style.opacity = '0.8'
          el.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)'
        })
        // –°–æ–∑–¥–∞–µ–º popup –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        const formatDate = (dateStr: string) => {
          try {
            return new Date(dateStr).toLocaleDateString('ru-RU', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })
          } catch {
            return dateStr
          }
        }

        const currentYear = new Date().getFullYear()
        const vehicleAge = incident.year ? currentYear - parseInt(incident.year) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        const popupHTML = `
          <div style="padding: 12px; font-family: system-ui, -apple-system, sans-serif; min-width: 220px;">
            <h3 style="font-weight: bold; font-size: 14px; margin: 0 0 8px 0; color: #1f2937;">
              üöó –ò–Ω—Ü–∏–¥–µ–Ω—Ç —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
            </h3>
            <div style="font-size: 12px; line-height: 1.4;">
              <p style="margin: 4px 0;">
                <strong>–¢–∏–ø:</strong> ${incident.transport_type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </p>
              <p style="margin: 4px 0;">
                <strong>–ú–∞—Ä–∫–∞:</strong> ${incident.brand || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${incident.model || ''}
              </p>
              <p style="margin: 4px 0;">
                <strong>–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</strong> ${incident.year || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} 
                ${vehicleAge !== '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' ? `(–≤–æ–∑—Ä–∞—Å—Ç: ${vehicleAge} –ª–µ—Ç)` : ''}
              </p>
              <p style="margin: 6px 0 4px 0;">
                <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> 
                <span style="color: ${getIncidentColor(incident.cause)}; font-weight: 500;">
                  ${incident.cause || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                </span>
              </p>
              <p style="margin: 4px 0;">
                <strong>–í—Ä–µ–º—è:</strong> ${formatDate(incident.created_at)}
              </p>
              <div style="margin-top: 8px; padding-top: 6px; border-top: 1px solid #e5e7eb;">
                <p style="margin: 2px 0;">
                  <strong>–ü–æ–∂–∞—Ä:</strong> 
                  <span style="color: ${incident.was_fire ? '#ef4444' : '#6b7280'};">
                    ${incident.was_fire ? 'üî• –î–∞' : '‚ùå –ù–µ—Ç'}
                  </span>
                </p>
                ${incident.injured && parseInt(incident.injured) > 0 ? `
                  <p style="margin: 2px 0; color: #f59e0b;">
                    <strong>–ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ:</strong> ${incident.injured}
                  </p>
                ` : ''}
                ${incident.deceased && parseInt(incident.deceased) > 0 ? `
                  <p style="margin: 2px 0; color: #ef4444;">
                    <strong>–ü–æ–≥–∏–±—à–∏–µ:</strong> ${incident.deceased}
                  </p>
                ` : ''}
              </div>
            </div>
          </div>
        `

        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        const marker = new Marker({ element: el })
          .setLngLat([incident.longitude, incident.latitude])
          .setPopup(
            new Popup({ 
              offset: 15,
              closeButton: true,
              closeOnClick: false,
              maxWidth: '300px'
            }).setHTML(popupHTML)
          )
        marker.addTo(map.current!)

        markers.current.push(marker)
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ –∑–¥–∞–Ω–∏—è—Ö
    if (showBuildingIncidents && buildingIncidents.length > 0) {
      buildingIncidents.forEach(incident => {
        if (isNaN(incident.latitude) || isNaN(incident.longitude)) {
          return
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø–æ —Ç–∏–ø—É –∑–¥–∞–Ω–∏—è
        const getBuildingColor = (buildingType: string) => {
          if (buildingType?.includes('–ñ–∏–ª—ã–µ')) {
            return '#3B82F6' // —Å–∏–Ω–∏–π –¥–ª—è –∂–∏–ª—ã—Ö
          }
          if (buildingType?.includes('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ')) {
            return '#10B981' // –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö
          }
          if (buildingType?.includes('–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ')) {
            return '#EF4444' // –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö
          }
          if (buildingType?.includes('–¢–æ—Ä–≥–æ–≤—ã–µ')) {
            return '#F59E0B' // –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö
          }
          if (buildingType?.includes('–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ')) {
            return '#8B5CF6' // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö
          }
          if (buildingType?.includes('–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ')) {
            return '#EC4899' // —Ä–æ–∑–æ–≤—ã–π –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö
          }
          if (buildingType?.includes('–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ')) {
            return '#06B6D4' // –≥–æ–ª—É–±–æ–π –¥–ª—è –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö
          }
          return '#6B7280' // —Å–µ—Ä—ã–π –¥–ª—è –ø—Ä–æ—á–∏—Ö
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ –ø–æ —É—Ä–æ–≤–Ω—é —É—â–µ—Ä–±–∞
        const getBuildingSize = (incident: BuildingIncident) => {
          if (incident.damage_level === '–ü–æ–ª–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ') return 18
          if (incident.damage_level === '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è') return 16
          if (incident.damage_level === '–ß–∞—Å—Ç–∏—á–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è') return 14
          if (incident.damage_level === '–ó–∞–¥—ã–º–ª–µ–Ω–∏–µ') return 12
          return 10 // –ë–µ–∑ —É—â–µ—Ä–±–∞
        }

        // –°–æ–∑–¥–∞–µ–º HTML —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –∑–¥–∞–Ω–∏—è
        const el = document.createElement('div')
        el.className = 'building-incident-marker'
        const size = getBuildingSize(incident)
        el.style.cssText = `
          width: ${size}px;
          height: ${size}px;
          border-radius: 15%;
          background-color: ${getBuildingColor(incident.building_type)};
          border: 2px solid white;
          box-shadow: 0 2px 4px rgba(0,0,0,0.3);
          cursor: pointer;
          opacity: 0.85;
          transition: all 0.2s ease;
        `

        // –≠—Ñ—Ñ–µ–∫—Ç hover –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        el.addEventListener('mouseenter', () => {
          el.style.opacity = '1'
          el.style.boxShadow = '0 4px 8px rgba(0,0,0,0.5)'
        })
        el.addEventListener('mouseleave', () => {
          el.style.opacity = '0.85'
          el.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)'
        })

        // –°–æ–∑–¥–∞–µ–º popup –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ –∑–¥–∞–Ω–∏–∏
        const formatDate = (dateStr: string) => {
          try {
            return new Date(dateStr).toLocaleDateString('ru-RU', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })
          } catch {
            return dateStr
          }
        }

        const popupHTML = `
          <div style="padding: 12px; font-family: system-ui, -apple-system, sans-serif; min-width: 220px;">
            <h3 style="font-weight: bold; font-size: 14px; margin: 0 0 8px 0; color: #1f2937;">
              üè¢ –ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –∑–¥–∞–Ω–∏–∏
            </h3>
            <div style="font-size: 12px; line-height: 1.4;">
              <p style="margin: 4px 0;">
                <strong>–¢–∏–ø –∑–¥–∞–Ω–∏—è:</strong> ${incident.building_type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </p>
              <p style="margin: 4px 0;">
                <strong>–≠—Ç–∞–∂–Ω–æ—Å—Ç—å:</strong> ${incident.floors || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —ç—Ç–∞–∂–µ–π
              </p>
              <p style="margin: 6px 0 4px 0;">
                <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> 
                <span style="color: ${getBuildingColor(incident.building_type)}; font-weight: 500;">
                  ${incident.cause || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                </span>
              </p>
              <p style="margin: 4px 0;">
                <strong>–£—Ä–æ–≤–µ–Ω—å —É—â–µ—Ä–±–∞:</strong> 
                <span style="color: ${incident.damage_level === '–ü–æ–ª–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ' ? '#ef4444' : 
                                     incident.damage_level === '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è' ? '#f59e0b' :
                                     incident.damage_level === '–ß–∞—Å—Ç–∏—á–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è' ? '#eab308' : 
                                     incident.damage_level === '–ó–∞–¥—ã–º–ª–µ–Ω–∏–µ' ? '#6b7280' : '#10b981'};">
                  ${incident.damage_level || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                </span>
              </p>
              <p style="margin: 4px 0;">
                <strong>–í—Ä–µ–º—è:</strong> ${formatDate(incident.created_at)}
              </p>
              <div style="margin-top: 8px; padding-top: 6px; border-top: 1px solid #e5e7eb;">
                <p style="margin: 2px 0;">
                  <strong>–ü–æ–∂–∞—Ä:</strong> 
                  <span style="color: ${incident.was_fire ? '#ef4444' : '#6b7280'};">
                    ${incident.was_fire ? 'üî• –î–∞' : '‚ùå –ù–µ—Ç'}
                  </span>
                </p>
                ${incident.injured && parseInt(incident.injured) > 0 ? `
                  <p style="margin: 2px 0; color: #f59e0b;">
                    <strong>–ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ:</strong> ${incident.injured}
                  </p>
                ` : ''}
                ${incident.deceased && parseInt(incident.deceased) > 0 ? `
                  <p style="margin: 2px 0; color: #ef4444;">
                    <strong>–ü–æ–≥–∏–±—à–∏–µ:</strong> ${incident.deceased}
                  </p>
                ` : ''}
              </div>
            </div>
          </div>
        `

        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –≤ –∑–¥–∞–Ω–∏–∏
        const marker = new Marker({ element: el })
          .setLngLat([incident.longitude, incident.latitude])
          .setPopup(
            new Popup({ 
              offset: 15,
              closeButton: true,
              closeOnClick: false,
              maxWidth: '300px'
            }).setHTML(popupHTML)
          )
        marker.addTo(map.current!)

        markers.current.push(marker)
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ–º–æ—â–∏
    if (helpIncidents && helpIncidents.length > 0) {
      helpIncidents.forEach(incident => {
        const getHelpColor = (helpType: string) => {
          const type = helpType?.toLowerCase() || ''
          if (type.includes('—É—Ç–µ—á–∫–∞') || type.includes('–≥–∞–∑')) return '#f59e0b'  // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
          if (type.includes('–¥—Ç–ø') || type.includes('–∞–≤–∞—Ä–∏—è')) return '#ef4444'  // –∫—Ä–∞—Å–Ω—ã–π
          if (type.includes('–≤–∑—Ä—ã–≤') || type.includes('—É–≥—Ä–æ–∑–∞')) return '#dc2626'  // —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
          if (type.includes('—Å–ø–∞—Å–µ–Ω–∏–µ') || type.includes('–ø–æ–º–æ—â—å')) return '#10b981'  // –∑–µ–ª–µ–Ω—ã–π
          return '#ec4899'  // —Ä–æ–∑–æ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        const el = document.createElement('div')
        el.className = 'help-incident-marker'
        el.style.cssText = `
          width: 20px;
          height: 20px;
          background: ${getHelpColor(incident.help_type)};
          border: 2px solid #ffffff;
          border-radius: 50%;
          cursor: pointer;
          box-shadow: 0 2px 4px rgba(0,0,0,0.3);
          opacity: 0.85;
          transition: all 0.2s ease;
          position: relative;
        `

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–º–æ—â–∏
        el.innerHTML = `
          <div style="
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 10px;
            font-weight: bold;
          ">üÜò</div>
        `

        el.addEventListener('mouseenter', () => {
          el.style.opacity = '1'
          el.style.boxShadow = '0 4px 8px rgba(0,0,0,0.4)'
        })

        el.addEventListener('mouseleave', () => {
          el.style.opacity = '0.85'
          el.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)'
        })

        const formatDate = (dateStr: string) => {
          try {
            return new Date(dateStr).toLocaleDateString('ru-RU', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })
          } catch {
            return dateStr
          }
        }

        const popupHTML = `
          <div style="padding: 12px; font-family: system-ui, -apple-system, sans-serif; min-width: 220px;">
            <h3 style="font-weight: bold; font-size: 14px; margin: 0 0 8px 0; color: #1f2937;">
              üÜò –í—ã–∑–æ–≤ –ø–æ–º–æ—â–∏
            </h3>
            <div style="font-size: 12px; line-height: 1.4;">
              <p style="margin: 4px 0;">
                <strong>–¢–∏–ø:</strong> ${incident.help_type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </p>
              <p style="margin: 4px 0;">
                <strong>–ú–µ—Å—Ç–æ:</strong> ${incident.location || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </p>
              <p style="margin: 4px 0;">
                <strong>–ü–æ–º–æ—â—å:</strong> 
                <span style="color: #ec4899; font-weight: 500;">
                  ${incident.assistance_type || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                </span>
              </p>
              <p style="margin: 4px 0;">
                <strong>–í—Ä–µ–º—è:</strong> ${formatDate(incident.created_at)}
              </p>
              <div style="margin-top: 8px; padding-top: 6px; border-top: 1px solid #e5e7eb;">
                ${incident.injured && parseInt(incident.injured) > 0 ? `
                  <p style="margin: 2px 0; color: #f59e0b;">
                    <strong>–ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ:</strong> ${incident.injured}
                  </p>
                ` : ''}
              </div>
            </div>
          </div>
        `

        const marker = new Marker({ element: el })
          .setLngLat([incident.longitude, incident.latitude])
          .setPopup(
            new Popup({ 
              offset: 15,
              closeButton: true,
              closeOnClick: false,
              maxWidth: '300px'
            }).setHTML(popupHTML)
          )
        marker.addTo(map.current!)
        markers.current.push(marker)
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥—Ä–∞–∂–¥–∞–Ω
    if (vigilanceIncidents && vigilanceIncidents.length > 0) {
      vigilanceIncidents.forEach(incident => {
        const el = document.createElement('div')
        el.className = 'vigilance-incident-marker'
        el.style.cssText = `
          width: 20px;
          height: 20px;
          background: #8b5cf6;
          border: 2px solid #ffffff;
          border-radius: 50%;
          cursor: pointer;
          box-shadow: 0 2px 4px rgba(0,0,0,0.3);
          opacity: 0.85;
          transition: all 0.2s ease;
          position: relative;
        `

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        el.innerHTML = `
          <div style="
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 10px;
            font-weight: bold;
          ">‚ö†Ô∏è</div>
        `

        el.addEventListener('mouseenter', () => {
          el.style.opacity = '1'
          el.style.boxShadow = '0 4px 8px rgba(0,0,0,0.4)'
        })

        el.addEventListener('mouseleave', () => {
          el.style.opacity = '0.85'
          el.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)'
        })

        const formatDate = (dateStr: string) => {
          try {
            return new Date(dateStr).toLocaleDateString('ru-RU', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })
          } catch {
            return dateStr
          }
        }

        const popupHTML = `
          <div style="padding: 12px; font-family: system-ui, -apple-system, sans-serif; min-width: 220px;">
            <h3 style="font-weight: bold; font-size: 14px; margin: 0 0 8px 0; color: #1f2937;">
              ‚ö†Ô∏è –ë–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥—Ä–∞–∂–¥–∞–Ω
            </h3>
            <div style="font-size: 12px; line-height: 1.4;">
              <p style="margin: 4px 0;">
                <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${incident.reason || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </p>
              <p style="margin: 4px 0;">
                <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${incident.source || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </p>
              <p style="margin: 4px 0;">
                <strong>–†–∞–π–æ–Ω:</strong> 
                <span style="color: #8b5cf6; font-weight: 500;">
                  ${incident.district || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
                </span>
              </p>
              <p style="margin: 4px 0;">
                <strong>–í—Ä–µ–º—è:</strong> ${formatDate(incident.created_at)}
              </p>
            </div>
          </div>
        `

        const marker = new Marker({ element: el })
          .setLngLat([incident.longitude, incident.latitude])
          .setPopup(
            new Popup({ 
              offset: 15,
              closeButton: true,
              closeOnClick: false,
              maxWidth: '300px'
            }).setHTML(popupHTML)
          )
        marker.addTo(map.current!)
        markers.current.push(marker)
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å —Å—É—Ö–æ—Å—Ç–æ–µ–º –∏ –º—É—Å–æ—Ä–æ–º
    if (dryGrassIncidents && dryGrassIncidents.length > 0) {
      dryGrassIncidents.forEach(incident => {
        const getGrassColor = (grassType: string) => {
          // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const type = grassType?.toLowerCase() || ''
          if (type.includes('–º—É—Å–æ—Ä')) return '#6b7280'  // —Å–µ—Ä—ã–π
          if (type.includes('—Å—É—Ö–æ–π') || type.includes('—Å—É—Ö–æ—Å—Ç–æ–π')) return '#f59e0b'  // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
          if (type.includes('—Ç—Ä–∞–≤–∞')) return '#eab308'  // –∂–µ–ª—Ç—ã–π
          return '#84cc16'  // –∑–µ–ª–µ–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        const el = document.createElement('div')
        el.className = 'drygrass-incident-marker'
        el.style.cssText = `
          width: 20px;
          height: 20px;
          background: ${getGrassColor(incident.grass_type)};
          border: 2px solid #ffffff;
          border-radius: 50%;
          cursor: pointer;
          box-shadow: 0 2px 4px rgba(0,0,0,0.3);
          opacity: 0.85;
          transition: all 0.2s ease;
          position: relative;
        `

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–µ—Ä–µ–≤–∞/—Ç—Ä–∞–≤—ã
        el.innerHTML = `
          <div style="
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 10px;
            font-weight: bold;
          ">üåø</div>
        `

        el.addEventListener('mouseenter', () => {
          el.style.opacity = '1'
          el.style.boxShadow = '0 4px 8px rgba(0,0,0,0.4)'
        })

        el.addEventListener('mouseleave', () => {
          el.style.opacity = '0.85'
          el.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)'
        })

        const formatDate = (dateStr: string) => {
          try {
            return new Date(dateStr).toLocaleDateString('ru-RU', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })
          } catch {
            return dateStr
          }
        }

        const popupHTML = `
          <div style="padding: 12px; font-family: system-ui, -apple-system, sans-serif; min-width: 220px;">
            <h3 style="font-weight: bold; font-size: 14px; margin: 0 0 8px 0; color: #1f2937;">
              üåø –ü–æ–∂–∞—Ä —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            </h3>
            <div style="font-size: 12px; line-height: 1.4;">
              <p style="margin: 4px 0;">
                <strong>–¢–∏–ø:</strong> ${incident.grass_type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </p>
              <p style="margin: 4px 0;">
                <strong>–ú–µ—Å—Ç–æ:</strong> ${incident.location || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </p>
              <p style="margin: 4px 0;">
                <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> 
                <span style="color: ${getGrassColor(incident.grass_type)}; font-weight: 500;">
                  ${incident.cause || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                </span>
              </p>
              <p style="margin: 4px 0;">
                <strong>–ü–ª–æ—â–∞–¥—å:</strong> ${incident.area || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –º¬≤
              </p>
              <p style="margin: 4px 0;">
                <strong>–í—Ä–µ–º—è:</strong> ${formatDate(incident.created_at)}
              </p>
              <div style="margin-top: 8px; padding-top: 6px; border-top: 1px solid #e5e7eb;">
                <p style="margin: 2px 0;">
                  <strong>–ü–æ–∂–∞—Ä:</strong> 
                  <span style="color: ${incident.was_fire ? '#ef4444' : '#6b7280'};">
                    ${incident.was_fire ? 'üî• –î–∞' : '‚ùå –ù–µ—Ç'}
                  </span>
                </p>
              </div>
            </div>
          </div>
        `

        const marker = new Marker({ element: el })
          .setLngLat([incident.longitude, incident.latitude])
          .setPopup(
            new Popup({ 
              offset: 15,
              closeButton: true,
              closeOnClick: false,
              maxWidth: '300px'
            }).setHTML(popupHTML)
          )
        marker.addTo(map.current!)
        markers.current.push(marker)
      })
    }

  }, [stations, mapLoaded, selectedScenario, selectedDistrict, transportIncidents, showTransportIncidents, buildingIncidents, showBuildingIncidents, helpIncidents, vigilanceIncidents, dryGrassIncidents])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–ª–æ—è –≥—Ä–∏–¥–∞ (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è 5) - –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º —Å–ª–æ–µ–º
  useEffect(() => {
    if (!map.current || !mapLoaded || !baseCoverageGrids || baseCoverageGrids.length === 0) return

    const baseSourceId = 'base-coverage-grids'
    const baseLayerId = 'base-coverage-grids-layer'
    const baseOutlineLayerId = baseLayerId + '-outline'

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏
    if (map.current.getLayer(baseOutlineLayerId)) {
      map.current.removeLayer(baseOutlineLayerId)
    }
    if (map.current.getLayer(baseLayerId)) {
      map.current.removeLayer(baseLayerId)
    }
    if (map.current.getSource(baseSourceId)) {
      map.current.removeSource(baseSourceId)
    }

    if (!showCoverageZones || !baseCoverageGrids || baseCoverageGrids.length === 0) return
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (selectedScenario !== "dynamic") return

    try {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–æ–Ω—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–∞–π–æ–Ω—É
      const filteredBaseGrids = selectedDistrict === "all" 
        ? baseCoverageGrids 
        : baseCoverageGrids.filter(grid => grid.district_id === parseInt(selectedDistrict))

      console.log(`–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π: ${filteredBaseGrids.length} –≥—Ä–∏–¥–æ–≤ (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è 5)`)

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º WKT –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ GeoJSON
      const baseFeatures = filteredBaseGrids
        .filter(grid => grid.geometry && grid.color)
        .map(grid => {
          try {
            const geometry = wellknown.parse(grid.geometry)
            if (!geometry) return null
            
            return {
              type: 'Feature' as const,
              geometry,
              properties: {
                district_id: grid.district_id,
                color: grid.color,
                population: grid.population,
                fire_count: grid.fire_count,
                layer_type: 'base',
                scenario: 'planned5'
              }
            }
          } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞–∑–æ–≤–æ–≥–æ WKT:', error)
            return null
          }
        })
        .filter((feature): feature is NonNullable<typeof feature> => feature !== null)

      if (baseFeatures.length === 0) return

      const baseGeojsonData = {
        type: 'FeatureCollection' as const,
        features: baseFeatures
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      map.current.addSource(baseSourceId, {
        type: 'geojson',
        data: baseGeojsonData
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π –ø–æ–ª–∏–≥–æ–Ω–æ–≤ (–±–æ–ª–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
      map.current.addLayer({
        id: baseLayerId,
        type: 'fill',
        source: baseSourceId,
        paint: {
          'fill-color': [
            'case',
            ['==', ['get', 'color'], 'green'], '#10B981',
            ['==', ['get', 'color'], 'orange'], '#F59E0B', 
            ['==', ['get', 'color'], 'red'], '#EF4444',
            ['==', ['get', 'color'], 'blue'], '#3B82F6',
            '#6B7280' // —Å–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          ],
          'fill-opacity': 0.25 // –ë–æ–ª–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π
        }
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä—ã –±–∞–∑–æ–≤–æ–≥–æ —Å–ª–æ—è
      map.current.addLayer({
        id: baseOutlineLayerId,
        type: 'line',
        source: baseSourceId,
        paint: {
          'line-color': '#ffffff',
          'line-width': 0.3,
          'line-opacity': 0.4
        }
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Å–ª–æ—è
      map.current.on('click', baseLayerId, (e) => {
        if (!e.features || !e.features[0]) return
        
        const feature = e.features[0]
        const props = feature.properties
        
        const colorMap = {
          'green': '–ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ (‚â§5 –º–∏–Ω)',
          'orange': '–û—Ä–∞–Ω–∂–µ–≤–∞—è –∑–æ–Ω–∞ (5-10 –º–∏–Ω)',
          'red': '–ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ (>10 –º–∏–Ω)',
          'blue': '–°–∏–Ω—è—è –∑–æ–Ω–∞ (—Å—Ç–∞–Ω—Ü–∏—è)'
        } as const
        const colorText = colorMap[props?.color as keyof typeof colorMap] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        new Popup()
          .setLngLat(e.lngLat)
          .setHTML(`
            <div class="p-2">
              <h3 class="font-bold text-sm">–ë–∞–∑–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ (–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è +5)</h3>
              <p class="text-xs"><span class="font-medium">–¢–∏–ø:</span> ${colorText}</p>
              <p class="text-xs"><span class="font-medium">–†–∞–π–æ–Ω:</span> ${props?.district_id || '–ù/–î'}</p>
              <p class="text-xs"><span class="font-medium">–ù–∞—Å–µ–ª–µ–Ω–∏–µ:</span> ${props?.population || '–ù/–î'}</p>
              <p class="text-xs"><span class="font-medium">–ü–æ–∂–∞—Ä—ã:</span> ${props?.fire_count || '–ù/–î'}</p>
            </div>
          `)
          .addTo(map.current!)
      })

      // –ö—É—Ä—Å–æ—Ä pointer –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π
      map.current.on('mouseenter', baseLayerId, () => {
        if (map.current) map.current.getCanvas().style.cursor = 'pointer'
      })
      map.current.on('mouseleave', baseLayerId, () => {
        if (map.current) map.current.getCanvas().style.cursor = ''
      })

      console.log(`–î–æ–±–∞–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π –≥—Ä–∏–¥–∞: ${baseFeatures.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–ª–æ—è –ø–æ–∫—Ä—ã—Ç–∏—è:', error)
    }
    
  }, [baseCoverageGrids, mapLoaded, selectedDistrict, showCoverageZones])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω –ø–æ–∫—Ä—ã—Ç–∏—è –∏–∑ WKT –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π)
  useEffect(() => {
    if (!map.current || !mapLoaded) return

    const sourceId = 'coverage-grids'
    const layerId = 'coverage-grids-layer'
    const outlineLayerId = layerId + '-outline'

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    if (map.current.getLayer(outlineLayerId)) {
      map.current.removeLayer(outlineLayerId)
    }
    if (map.current.getLayer(layerId)) {
      map.current.removeLayer(layerId)
    }
    if (map.current.getSource(sourceId)) {
      map.current.removeSource(sourceId)
    }

    if (!showCoverageZones || !coverageGrids || coverageGrids.length === 0) return

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–æ–Ω—ã –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–∞–π–æ–Ω—É
    const filteredCoverageGrids = selectedDistrict === "all" 
      ? coverageGrids 
      : coverageGrids.filter(grid => grid.district_id === parseInt(selectedDistrict))
      
    console.log(`–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ${filteredCoverageGrids.length} –≥—Ä–∏–¥–æ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è ${selectedScenario}, —Ä–∞–π–æ–Ω: ${selectedDistrict}`)

    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º WKT –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ GeoJSON
      const features = filteredCoverageGrids
        .filter(grid => grid.geometry && grid.color)
        .map(grid => {
          try {
            const geometry = wellknown.parse(grid.geometry)
            if (!geometry) return null
            
            return {
              type: 'Feature' as const,
              geometry,
              properties: {
                district_id: grid.district_id,
                color: grid.color,
                population: grid.population,
                fire_count: grid.fire_count
              }
            }
          } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WKT:', error)
            return null
          }
        })
        .filter((feature): feature is NonNullable<typeof feature> => feature !== null)

      if (features.length === 0) return

      const geojsonData = {
        type: 'FeatureCollection' as const,
        features
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
      map.current.addSource(sourceId, {
        type: 'geojson',
        data: geojsonData
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π
      map.current.addLayer({
        id: layerId,
        type: 'fill',
        source: sourceId,
        paint: {
          'fill-color': [
            'case',
            ['==', ['get', 'color'], 'green'], '#10B981',
            ['==', ['get', 'color'], 'orange'], '#F59E0B', 
            ['==', ['get', 'color'], 'red'], '#EF4444',
            ['==', ['get', 'color'], 'blue'], '#3B82F6',
            '#6B7280' // —Å–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          ],
          'fill-opacity': 0.6
        }
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä—ã
      map.current.addLayer({
        id: layerId + '-outline',
        type: 'line',
        source: sourceId,
        paint: {
          'line-color': '#ffffff',
          'line-width': 0.5,
          'line-opacity': 0.8
        }
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
      map.current.on('click', layerId, (e) => {
        if (!e.features || !e.features[0]) return
        
        const feature = e.features[0]
        const props = feature.properties
        
        const colorMap = {
          'green': '–ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ (‚â§5 –º–∏–Ω)',
          'orange': '–û—Ä–∞–Ω–∂–µ–≤–∞—è –∑–æ–Ω–∞ (5-10 –º–∏–Ω)',
          'red': '–ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ (>10 –º–∏–Ω)',
          'blue': '–°–∏–Ω—è—è –∑–æ–Ω–∞ (—Å—Ç–∞–Ω—Ü–∏—è)'
        } as const
        const colorText = colorMap[props?.color as keyof typeof colorMap] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const getScenarioTitle = (scenario: string) => {
          switch (scenario) {
            case 'current': return '–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'
            case 'planned5': return '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è +5'
            case 'planned16': return '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è +16'
            case 'aiRecommended': return 'AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
            case 'dynamic': return '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
            default: return '–ó–æ–Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏—è'
          }
        }

        new Popup()
          .setLngLat(e.lngLat)
          .setHTML(`
            <div class="p-2">
              <h3 class="font-bold text-sm">${getScenarioTitle(selectedScenario)}</h3>
              <p class="text-xs"><span class="font-medium">–¢–∏–ø:</span> ${colorText}</p>
              <p class="text-xs"><span class="font-medium">–†–∞–π–æ–Ω:</span> ${props?.district_id || '–ù/–î'}</p>
              <p class="text-xs"><span class="font-medium">–ù–∞—Å–µ–ª–µ–Ω–∏–µ:</span> ${props?.population || '–ù/–î'}</p>
              <p class="text-xs"><span class="font-medium">–ü–æ–∂–∞—Ä—ã:</span> ${props?.fire_count || '–ù/–î'}</p>
            </div>
          `)
          .addTo(map.current!)
      })

      // –ö—É—Ä—Å–æ—Ä pointer –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
      map.current.on('mouseenter', layerId, () => {
        if (map.current) map.current.getCanvas().style.cursor = 'pointer'
      })
      map.current.on('mouseleave', layerId, () => {
        if (map.current) map.current.getCanvas().style.cursor = ''
      })

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω –ø–æ–∫—Ä—ã—Ç–∏—è:', error)
    }
    
  }, [coverageGrids, mapLoaded, showCoverageZones, selectedScenario, selectedDistrict])

  const getScenarioDisplayName = (scenario: string) => {
    switch (scenario) {
      case 'current': return '–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'
      case 'planned5': return '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è +5'
      case 'planned16': return '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è +16'
      case 'aiRecommended': return 'AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
      case 'dynamic': return 'üî¨ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
      default: return scenario
    }
  }

  return (
    <div className="relative w-full h-full">
      {/* –ö–∞—Ä—Ç–∞ */}
      <div ref={mapContainer} className="w-full h-full rounded-lg overflow-hidden" />
      
      {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="absolute top-4 left-4 space-y-2">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏ */}
        <div className="bg-white/90 backdrop-blur-sm rounded-lg p-2 shadow-lg border">
          <div className="flex items-center gap-2">
            <MapIcon className="h-4 w-4 text-blue-600" />
            <span className="text-sm font-medium">{getScenarioDisplayName(selectedScenario)}</span>
          </div>
          <div className="text-xs text-gray-600 mt-1">
            {(() => {
              const safeStations = Array.isArray(stations) ? stations : [];
              return selectedDistrict === "all" ? safeStations.length : safeStations.filter(s => s.district_id === parseInt(selectedDistrict)).length;
            })()} —Å—Ç–∞–Ω—Ü–∏–π
          </div>
        </div>

        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å 2D/3D */}
        <div className="bg-white/90 backdrop-blur-sm rounded-lg p-2 shadow-lg border">
          <Button
            onClick={toggle3D}
            variant={is3D ? "default" : "ghost"}
            size="sm"
            className="w-full flex items-center gap-2"
          >
            {is3D ? <Box className="h-4 w-4" /> : <MapIcon className="h-4 w-4" />}
            {is3D ? '3D –†–µ–∂–∏–º' : '2D –†–µ–∂–∏–º'}
          </Button>
        </div>

        {/* –°–±—Ä–æ—Å –≤–∏–¥–∞ */}
        <div className="bg-white/90 backdrop-blur-sm rounded-lg p-2 shadow-lg border">
          <Button
            onClick={resetView}
            variant="ghost"
            size="sm"
            className="w-full flex items-center gap-2"
          >
            <RotateCcw className="h-4 w-4" />
            –¶–µ–Ω—Ç—Ä –ê–ª–º–∞—Ç—ã
          </Button>
        </div>
      </div>

      {/* –õ–µ–≥–µ–Ω–¥–∞ */}
      <div className="absolute bottom-4 left-4 bg-white/90 backdrop-blur-sm rounded-lg p-3 shadow-lg border max-w-xs">
        <h4 className="text-sm font-medium mb-2">–õ–µ–≥–µ–Ω–¥–∞ —Å—Ç–∞–Ω—Ü–∏–π:</h4>
        <div className="space-y-1 text-xs mb-3">
          {(() => {
            const safeStations = Array.isArray(stations) ? stations : [];
            const existing = safeStations.filter(s => s.exist_text === '–°—É—â–µ—Å—Ç–≤—É–µ—Ç');
            const planned5 = safeStations.filter(s => s.exist_text === '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è 5');
            const planned16 = safeStations.filter(s => s.exist_text === '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è 16');
            const recommendations = safeStations.filter(s => s.exist_text === '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è');
            const dynamic = safeStations.filter(s => s.exist_text === '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è');
            const dynamicWithLand = dynamic.filter(s => s.has_land === true);
            const dynamicWithoutLand = dynamic.filter(s => s.has_land === false);
            
            return (
              <>
                {existing.length > 0 && (
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-gray-500 border border-white"></div>
                    <span>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ({existing.length})</span>
                  </div>
                )}
                {planned5.length > 0 && (
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-blue-500 border border-white"></div>
                    <span>–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è +5 ({planned5.length})</span>
                  </div>
                )}
                {planned16.length > 0 && (
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-green-500 border border-white"></div>
                    <span>–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è +16 ({planned16.length})</span>
                  </div>
                )}
                {recommendations.length > 0 && (
                  <div className="flex flex-col gap-1">
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-red-500 border border-white"></div>
                      <span>AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({recommendations.length})</span>
                    </div>
                    <div className="text-xs text-gray-500 pl-5">
                      20 —Ç–µ–∫—É—â–∏—Ö + 5 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö + 10 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö
                    </div>
                  </div>
                )}
                {dynamic.length > 0 && (
                  <>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-green-500 border border-white"></div>
                      <span>–° –∑–µ–º–ª–µ–π ({dynamicWithLand.length})</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-red-500 border border-white"></div>
                      <span>–ù–µ—Ç –∑–µ–º–ª–∏, –Ω–æ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ({dynamicWithoutLand.length})</span>
                    </div>
                  </>
                )}
              </>
            );
          })()}
        </div>
        
        <div className="border-t pt-2">
          <h4 className="text-sm font-medium mb-2">–ó–æ–Ω—ã –ø–æ–∫—Ä—ã—Ç–∏—è:</h4>
          <div className="space-y-1 text-xs mb-2">
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-green-500 opacity-60 border border-white"></div>
              <span>‚â§ 5 –º–∏–Ω—É—Ç</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-orange-500 opacity-60 border border-white"></div>
              <span>5-10 –º–∏–Ω—É—Ç</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-red-500 opacity-60 border border-white"></div>
              <span>&gt;10 –º–∏–Ω—É—Ç</span>
            </div>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {!mapLoaded && (
        <div className="absolute inset-0 bg-gray-100 flex items-center justify-center rounded-lg">
          <div className="text-center">
            <MapPin className="h-12 w-12 text-blue-500 mx-auto mb-2 animate-pulse" />
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
          </div>
        </div>
      )}
    </div>
  )
} 